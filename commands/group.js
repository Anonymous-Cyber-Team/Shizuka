// commands/group.js

const {
  getPendingGroups,
  approveGroupByCriteria,
  rejectGroupByCriteria,
  rejectAllPending,
  getApprovedGroups,
  removeApprovedGroup,
} = require("../utils/groupManager");

module.exports = {
  config: {
    name: "group",
    aliases: ["grp", "managegroup"],
    description:
      "ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзНрждрзГржХ ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржкрзНрж░рзБржнрж╛рж▓ рж╕рж┐рж╕рзНржЯрзЗржо ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржХржорж╛ржирзНржбред",
    permission: 1,
    cooldown: 3,
    usage:
      "@group <list|approve|reject|rejectall|approved|remove> [id/name/index]", // <-- ржлрж┐ржХрзНрж╕ржб
  },
  run: async function ({ api, message, args }) {
    const command = args[0]?.toLowerCase();
    const criteria = args.slice(1).join(" ");

    switch (command) {
      case "list":
      case "pending":
        const pendingGroups = getPendingGroups();
        if (pendingGroups.length === 0) {
          api.sendMessage(
            "тП│ ржХрзЛржирзЛ ржЧрзНрж░рзБржк ржкрзЗржирзНржбрж┐ржВ ржирзЗржЗред",
            message.threadID,
            message.messageID
          );
        } else {
          let response = "тП│ ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк рждрж╛рж▓рж┐ржХрж╛:\n\n";
          pendingGroups.forEach((group, index) => {
            response += `${index + 1}. ржирж╛ржо: ${group.name}\n   ржЖржЗржбрж┐: ${
              group.id
            }\n   ржпрзБржХрзНржд ржХрж░рзЗржЫрзЗ: ${group.requested_by_name} (${
              group.requested_by_id
            })\n\n`;
          });
          api.sendMessage(response, message.threadID, message.messageID);
        }
        break;
      case "approve":
      case "acc":
        if (!criteria)
          return api.sendMessage(
            "тЭУ ржмрзНржпржмрж╣рж╛рж░: @group approve <id | ржирж╛ржо | рж▓рж┐рж╕рзНржЯ ржиржорзНржмрж░>",
            message.threadID,
            message.messageID
          );
        const approveResult = approveGroupByCriteria(criteria);
        api.sendMessage(
          approveResult.message,
          message.threadID,
          message.messageID
        );
        break;
      case "reject":
      case "dec":
        if (!criteria)
          return api.sendMessage(
            "тЭУ ржмрзНржпржмрж╣рж╛рж░: @group reject <id | ржирж╛ржо | рж▓рж┐рж╕рзНржЯ ржиржорзНржмрж░>",
            message.threadID,
            message.messageID
          );
        const rejectResult = rejectGroupByCriteria(criteria);
        api.sendMessage(
          rejectResult.message,
          message.threadID,
          message.messageID
        );
        break;
      case "rejectall":
      case "clear":
        const rejectAllResult = rejectAllPending();
        api.sendMessage(
          rejectAllResult.message,
          message.threadID,
          message.messageID
        );
        break;
      case "approved":
      case "applist":
        const approvedGroups = getApprovedGroups();
        if (approvedGroups.length === 0) {
          api.sendMessage(
            "тЬЕ ржХрзЛржирзЛ ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржкрзНрж░рзБржн ржХрж░рж╛ ржирзЗржЗред",
            message.threadID,
            message.messageID
          );
        } else {
          let responseApproved = "тЬЕ ржЕрзНржпрж╛ржкрзНрж░рзБржнржб ржЧрзНрж░рзБржк рждрж╛рж▓рж┐ржХрж╛:\n\n";
          approvedGroups.forEach((group, index) => {
            responseApproved += `${index + 1}. ржирж╛ржо: ${group.name}\n   ржЖржЗржбрж┐: ${
              group.id
            }\n   рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${group.status === "active" ? "ЁЯЯв" : "ЁЯФ┤"}\n\n`;
          });
          api.sendMessage(
            responseApproved,
            message.threadID,
            message.messageID
          );
        }
        break;
      case "remove":
      case "unapprove":
        if (!criteria)
          return api.sendMessage(
            "тЭУ ржмрзНржпржмрж╣рж╛рж░: @group remove <approved_id | ржирж╛ржо | рж▓рж┐рж╕рзНржЯ ржиржорзНржмрж░>",
            message.threadID,
            message.messageID
          );
        const removeResult = removeApprovedGroup(criteria);
        api.sendMessage(
          removeResult.message,
          message.threadID,
          message.messageID
        );
        break;
      default:
        api.sendMessage(
          "тЭУ ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржХржорж╛ржирзНржб:\n" +
            "тАв list - ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк ржжрзЗржЦрзБржи\n" +
            "тАв approve <id|ржирж╛ржо|ржиржорзНржмрж░> - ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржкрзНрж░рзБржн ржХрж░рзБржи\n" +
            "тАв reject <id|ржирж╛ржо|ржиржорзНржмрж░> - ржЧрзНрж░рзБржк рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рзБржи\n" +
            "тАв rejectall - рж╕ржм ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рзБржи\n" +
            "тАв approved - ржЕрзНржпрж╛ржкрзНрж░рзБржнржб ржЧрзНрж░рзБржк ржжрзЗржЦрзБржи\n" +
            "тАв remove <id|ржирж╛ржо|ржиржорзНржмрж░> - ржЕрзНржпрж╛ржкрзНрж░рзБржнржб ржЧрзНрж░рзБржк рж░рж┐ржорзБржн ржХрж░рзБржи",
          message.threadID,
          message.messageID
        );
        break;
    }
  },
};
