// commands/teach.js

const teachManager = require("../utils/teachManager");

// Teach ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
const teachingState = new Map(); // key: adminID, value: { step: 'ask_question'/'ask_answer', question: '...', editIndex: -1 }

module.exports = {
  config: {
    name: "teach",
    aliases: ["t", "learn"],
    description:
      "‡¶∏‡¶ø‡¶ú‡ßÅ‡¶ï‡¶æ‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã, ‡¶¶‡ßá‡¶ñ‡¶æ, ‡¶è‡¶°‡¶ø‡¶ü ‡¶¨‡¶æ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®)‡•§",
    permission: 1, // ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®
    cooldown: 5,
    usage: "@teach [list|edit|delete] [index]", // ‡¶Æ‡ßÇ‡¶≤ teach ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠
  },

  run: async function ({ api, message, args, config }) {
    const adminID = message.senderID;
    const subCommand = args[0]?.toLowerCase();
    const indexArg = args[1]; // Edit ‡¶¨‡¶æ Delete ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞

    // --- ‡¶∏‡¶æ‡¶¨-‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ---
    if (subCommand === "list" || subCommand === "l") {
      const teachList = teachManager.getTeachList();
      if (teachList.length === 0) {
        return api.sendMessage(
          "üß† ‡¶∏‡¶ø‡¶ú‡ßÅ‡¶ï‡¶æ‡¶ï‡ßá ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡¶®‡¶ø‡•§",
          message.threadID,
          message.messageID
        );
      }
      let response = `üìö ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (‡¶Æ‡ßã‡¶ü ${teachList.length} ‡¶ü‡¶ø):\n\n`;
      teachList.forEach((item, index) => {
        response += `${index + 1}. ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${item.question}\n   ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${
          item.answer
        }\n\n`;
      });
      return api.sendMessage(response, message.threadID, message.messageID);
    }

    if (subCommand === "edit" || subCommand === "e") {
      const index = parseInt(indexArg, 10) - 1; // 1-based index to 0-based
      const existingData = teachManager.getTeachDataByIndex(index);
      if (!existingData) {
        return api.sendMessage(
          `‚ùå ‡¶Ü‡¶á‡¶°‡¶ø ${indexArg} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ "@teach list" ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§`,
          message.threadID,
          message.messageID
        );
      }
      // ‡¶è‡¶°‡¶ø‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ
      teachingState.set(adminID, {
        step: "ask_edit_question",
        editIndex: index,
        oldQuestion: existingData.question,
        oldAnswer: existingData.answer,
      });
      return api.sendMessage(
        `‚úèÔ∏è ‡¶Ü‡¶á‡¶°‡¶ø ${indexArg} ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§\n\n‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¨‡¶≤‡ßÅ‡¶® (‡¶Ö‡¶•‡¶¨‡¶æ 'skip' ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®):`,
        message.threadID,
        message.messageID
      );
    }

    if (subCommand === "delete" || subCommand === "del" || subCommand === "d") {
      const index = parseInt(indexArg, 10) - 1; // 1-based index to 0-based
      if (isNaN(index)) {
        return api.sendMessage(
          `‚ùì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: @teach delete <‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞>`,
          message.threadID,
          message.messageID
        );
      }
      const deleteResult = teachManager.deleteTeachData(index);
      return api.sendMessage(
        deleteResult.message,
        message.threadID,
        message.messageID
      );
    }

    // --- ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ Teach ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ---
    if (teachingState.has(adminID)) {
      // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ‡ßü ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ
      teachingState.delete(adminID);
    }
    teachingState.set(adminID, { step: "ask_question", editIndex: -1 }); // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ
    return api.sendMessage(
      "‚úçÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶ø‡¶ú‡ßÅ‡¶ï‡¶æ‡¶ï‡ßá ‡¶ï‡ßÄ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∂‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶¨‡¶≤‡ßÅ‡¶®...",
      message.threadID,
      message.messageID
    );
  },

  // Teach ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (index.js ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá)
  handleReply: async function ({ api, message }) {
    const adminID = message.senderID;
    const state = teachingState.get(adminID);

    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã Teach ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶®‡¶æ ‡¶ö‡¶≤‡ßá ‡¶¨‡¶æ ‡¶è‡¶ü‡¶ø Teach ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶®‡¶æ ‡¶π‡ßü
    if (!state || !message.messageReply || !message.messageReply.messageID) {
      return false;
    }

    const replyText = message.body.trim();

    if (state.step === "ask_question") {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá
      state.question = replyText;
      state.step = "ask_answer";
      teachingState.set(adminID, state);
      return api.sendMessage(
        `‚úÖ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø:\n"${replyText}"\n\n‡¶è‡¶¨‡¶æ‡¶∞ ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶¨‡¶≤‡ßÅ‡¶®...`,
        message.threadID,
        message.messageID
      );
    } else if (state.step === "ask_answer") {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá
      const answer = replyText;
      const question = state.question;
      teachingState.delete(adminID); // ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßá‡¶∑

      const addResult = teachManager.addTeachData(question, answer);
      return api.sendMessage(
        addResult.message,
        message.threadID,
        message.messageID
      );
    } else if (state.step === "ask_edit_question") {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá (‡¶Ö‡¶•‡¶¨‡¶æ skip)
      state.newQuestion =
        replyText.toLowerCase() === "skip" ? state.oldQuestion : replyText;
      state.step = "ask_edit_answer";
      teachingState.set(adminID, state);
      return api.sendMessage(
        `‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡ßá‡¶ü:\n"${state.newQuestion}"\n\n‡¶è‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶¨‡¶≤‡ßÅ‡¶® (‡¶Ö‡¶•‡¶¨‡¶æ 'skip' ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®):`,
        message.threadID,
        message.messageID
      );
    } else if (state.step === "ask_edit_answer") {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá (‡¶Ö‡¶•‡¶¨‡¶æ skip)
      const newAnswer =
        replyText.toLowerCase() === "skip" ? state.oldAnswer : replyText;
      const index = state.editIndex;
      const newQuestion = state.newQuestion;
      teachingState.delete(adminID); // ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶∂‡ßá‡¶∑

      const editResult = teachManager.editTeachData(
        index,
        newQuestion,
        newAnswer
      );
      return api.sendMessage(
        editResult.message,
        message.threadID,
        message.messageID
      );
    }

    return false; // state ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶®‡ßü
  },
};
