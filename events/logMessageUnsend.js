// events/logMessageUnsend.js (v1.1 - More Debugging)

const fs = require("fs-extra");
const axios = require("axios"); // <-- axios ржЗржорзНржкрзЛрж░рзНржЯ
const path = require("path");

module.exports = {
  name: "log:message-unsend",

  run: async function ({ api, message, config, messageCache }) {
    // *** ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж▓ржЧ ***
    console.log(
      `[AntiUnsend Debug] Event received for Thread: ${message.threadID}, Author: ${message.author}, UnsentMsgID: ${message.logMessageData.messageID}`
    );

    const ADMIN_IDS = config.ADMIN_IDS || [];
    const unsenderID = message.author;
    const unsentMessageID = message.logMessageData.messageID;

    // ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзЗржХ
    if (ADMIN_IDS.includes(unsenderID)) {
      console.log(
        `[AntiUnsend Debug] Action ignored: Unsender ${unsenderID} is an admin.`
      );
      return;
    }

    // ржХрзНржпрж╛рж╢ ржЪрзЗржХ
    const cachedMessage = messageCache.get(unsentMessageID);
    // *** ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж▓ржЧ ***
    console.log(
      `[AntiUnsend Debug] Checking cache for ${unsentMessageID}. Found:`,
      cachedMessage ? "Yes" : "No"
    );

    if (!cachedMessage) {
      console.log(`[AntiUnsend Debug] Message not found in cache or expired.`);
      return; // ржХрзНржпрж╛рж╢рзЗ ржирж╛ ржкрзЗрж▓рзЗ ржЗржЧржирзЛрж░
    }

    const originalSenderID = cachedMessage.senderID;
    const originalBody = cachedMessage.body;
    const originalAttachments = cachedMessage.attachments || []; // Ensure it's an array

    // *** ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж▓ржЧ ***
    console.log(
      `[AntiUnsend Debug] Cached Data: Sender=${originalSenderID}, Body=${
        originalBody ? '"' + originalBody.substring(0, 20) + '"...' : "No"
      }, Attachments=${originalAttachments.length}`
    );

    // ржкрзНрж░рзЗрж░ржХ ржПржХржЗ ржХрж┐ржирж╛ ржПржмржВ ржХрж┐ржЫрзБ ржХржирзНржЯрзЗржирзНржЯ (ржмржбрж┐ ржмрж╛ ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ) ржЖржЫрзЗ ржХрж┐ржирж╛
    if (
      unsenderID === originalSenderID &&
      (originalBody || originalAttachments.length > 0)
    ) {
      let userName = `User (${unsenderID})`;
      try {
        // *** ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж▓ржЧ ***
        console.log(`[AntiUnsend Debug] Fetching user info for ${unsenderID}`);
        const userInfo = await api.getUserInfo([unsenderID]);
        userName = userInfo[unsenderID]?.name || userName;
        console.log(`[AntiUnsend Debug] Fetched user name: ${userName}`);
      } catch (e) {
        console.warn("[AntiUnsend] User name fetch error:", e);
      }

      // --- ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ ---
      const attachmentsList = [];
      const downloadedFiles = []; // ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржкрж╛рже рж╕рзЗржн рж░рж╛ржЦрж╛ рж╣ржмрзЗ

      if (originalAttachments.length > 0) {
        console.log(
          `[AntiUnsend] Downloading ${originalAttachments.length} attachments...`
        );
        try {
          let count = 0;
          for (const file of originalAttachments) {
            count++;
            // ржлрж╛ржЗрж▓рзЗрж░ ржЯрж╛ржЗржк ржЕржирзБржпрж╛рзЯрзА ржПржХрзНрж╕ржЯрзЗржирж╢ржи ржмрзЗрж░ ржХрж░рж╛ (URL ржерзЗржХрзЗ ржмрж╛ ржЯрж╛ржЗржк ржерзЗржХрзЗ)
            let ext = "tmp";
            if (file.type === "photo") ext = "jpg";
            else if (file.type === "video") ext = "mp4";
            else if (file.type === "audio") ext = "mp3";
            else if (file.type === "animated_image") ext = "gif";
            else if (file.url) {
              try {
                ext = new URL(file.url).pathname.split(".").pop() || "tmp";
              } catch {}
            }

            const filePath = path.join(
              __dirname,
              "..",
              "cache",
              `resend_${unsentMessageID}_${count}.${ext}`
            );
            downloadedFiles.push(filePath); // ржкрж╛рже рж╕рзЗржн ржХрж░рж╛

            // ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб
            const response = await axios.get(
              file.url || file.previewUrl || file.thumbnailUrl,
              { responseType: "arraybuffer" }
            );
            await fs.writeFile(filePath, Buffer.from(response.data, "binary"));
            attachmentsList.push(fs.createReadStream(filePath));
            console.log(
              `[AntiUnsend] ржлрж╛ржЗрж▓ ${count} ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи: ${filePath}`
            );
          }
        } catch (downloadError) {
          console.error(
            "[AntiUnsend] ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ рж╕рзЗржн ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛:",
            downloadError
          );
          // ржбрж╛ржЙржирж▓рзЛржб ржлрзЗржЗрж▓ ржХрж░рж▓рзЗ рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ (ржпржжрж┐ ржерж╛ржХрзЗ)
          if (!originalBody) return; // ржпржжрж┐ рж╢рзБржзрзБ ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ ржерж╛ржХрзЗ ржПржмржВ ржбрж╛ржЙржирж▓рзЛржб ржлрзЗржЗрж▓ ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ ржХрж┐ржЫрзБржЗ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ ржирж╛
          attachmentsList.length = 0; // ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ рж▓рж┐рж╕рзНржЯ ржЦрж╛рж▓рж┐ ржХрж░рж╛
          downloadedFiles.length = 0; // ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ рж▓рж┐рж╕рзНржЯ ржЦрж╛рж▓рж┐ ржХрж░рж╛
        }
      }

      // --- рж░рж┐ржкрзЛрж╕рзНржЯ ржорзЗрж╕рзЗржЬ рждрзИрж░рж┐ ---
      const mention = { tag: `@${userName}`, id: unsenderID };
      let repostBody = `ржХржЗ ржЧрзЛ рж╕ржмрж╛ржЗ ржжрзЗржЦрзБржи ЁЯСА\n${mention.tag} ржПржЗ рж▓рзБржЪрзНржЫрж╛ржпрж╝ ЁЯдн\n`;
      if (originalBody) {
        repostBody += `ржорж╛рждрзНрж░ "${originalBody}"\n`;
      }
      if (attachmentsList.length > 0) {
        repostBody += `ржПржЗ ${
          attachmentsList.length > 1
            ? attachmentsList.length + "ржЯрж╛ ржлрж╛ржЗрж▓"
            : "ржлрж╛ржЗрж▓ржЯрж╛"
        } `;
      } else if (originalBody) {
        repostBody += `ржПржЗ ржЯрзЗржХрзНрж╕ржЯ ржЯрж╛ `;
      }
      repostBody += `рж░рж┐ржорзБржн ржжрж┐ржЫрзЗЁЯШБ`;

      const resendMsg = {
        body: repostBody,
        mentions: [mention],
      };
      if (attachmentsList.length > 0) {
        resendMsg.attachment = attachmentsList;
      }

      // --- ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ---
      // *** ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж▓ржЧ ***
      console.log(
        `[AntiUnsend Debug] Sending repost message to thread ${message.threadID}`
      );
      api.sendMessage(resendMsg, message.threadID, (sendErr, sentInfo) => {
        // ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржжрзЗржУрзЯрж╛
        downloadedFiles.forEach((filePath) => {
          fs.unlink(filePath, (delErr) => {
            if (delErr)
              console.warn(
                `[AntiUnsend] ржХрзНржпрж╛рж╢ ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: ${filePath}`,
                delErr
              );
          });
        });

        if (sendErr) {
          console.error("[AntiUnsend] рж░рж┐ржкрзЛрж╕рзНржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛:", sendErr);
          // ржпржжрж┐ ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯрж╕рж╣ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯ, рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрж╛ржарж╛ржирзЛрж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ (ржпржжрж┐ ржЯрзЗржХрзНрж╕ржЯ ржерж╛ржХрзЗ)
          if (attachmentsList.length > 0 && originalBody) {
            resendMsg.body = `ЁЯзР ${mention.tag} ржПржХржЯрж┐ ржорзЗрж╕рзЗржЬ ("${originalBody}") ржПржмржВ ржХрж┐ржЫрзБ ржлрж╛ржЗрж▓ рж░рж┐ржорзБржн ржХрж░рзЗржЫрзЗред`;
            delete resendMsg.attachment;
            api.sendMessage(resendMsg, message.threadID);
          } else if (originalBody) {
            api.sendMessage(
              `ЁЯзР ${mention.tag} ржПржХржЯрж┐ ржорзЗрж╕рзЗржЬ рж░рж┐ржорзБржн ржХрж░рзЗржЫрзЗ: "${originalBody}"`,
              message.threadID
            );
          }
        } else {
          console.log(
            `[AntiUnsend Success] Message reposted successfully. Original ID: ${unsentMessageID}`
          ); // рж╕ржлрж▓ рж▓ржЧ
          messageCache.delete(unsentMessageID); // рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛рж▓рзЗ ржХрзНржпрж╛рж╢ ржбрж┐рж▓рж┐ржЯ
        }
      });
    } else {
      console.log(
        `[AntiUnsend Debug] Condition not met: Sender match=${
          unsenderID === originalSenderID
        }, Has Content=${!!(originalBody || originalAttachments.length > 0)}`
      );
      // ржЕржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржХрзНржпрж╛рж╢ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ ржпржжрж┐ ржкрзНрж░рзЗрж░ржХ ржирж╛ ржорзЗрж▓рзЗ
      if (unsenderID !== originalSenderID) messageCache.delete(unsentMessageID);
    }
  },
};
