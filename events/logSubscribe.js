// events/logSubscribe.js (v2.2 - Admin Check Fix)

const fs = require("fs-extra");
const path = require("path");
const groupManager = require("../utils/groupManager");

module.exports = {
  name: "log:subscribe",

  run: async function ({ api, message, config }) {
    const botID = api.getCurrentUserID();
    const threadID = message.threadID;
    const adderID = message.author; // ржпрзЗ ржмрзНржпржХрзНрждрж┐ ржЕрзНржпрж╛ржб ржХрж░рзЗржЫрзЗ (This ID needs the String() check)
    const addedParticipants = message.logMessageData.addedParticipants;

    const botWasAdded = addedParticipants.some(
      (user) => String(user.userFbId) === String(botID)
    );

    if (botWasAdded) {
      // --- ржмржЯржХрзЗ ржЧрзНрж░рзБржкрзЗ ржЕрзНржпрж╛ржб ржХрж░рж╛рж░ рж▓ржЬрж┐ржХ ---
      console.log(
        `[Group Subscribe] ржмржЯржХрзЗ ржЧрзНрж░рзБржк ${threadID}-ржП ржпрзБржХрзНржд ржХрж░рзЗржЫрзЗ ${adderID}`
      );

      // <--- рж╕ржорж╛ржзрж╛ржи: adderID ржХрзЗ String() ржжрж┐рзЯрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзЗржХ ---
      const isAdminAdder = config.ADMIN_IDS.includes(String(adderID));
      console.log(
        `[Group Subscribe] Adder ${adderID} is admin: ${isAdminAdder}`
      ); // Debug log

      if (isAdminAdder) {
        // --- ржЕрзНржпрж╛ржбржорж┐ржи ржпрзБржХрзНржд ржХрж░рж▓рзЗ ---
        const result = await groupManager.autoApproveGroup(
          api,
          threadID,
          adderID
        );
        if (result) {
          api.sendMessage(
            "ЁЯМ╕ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржорж╛ржХрзЗ ржпрзБржХрзНржд ржХрж░рж╛рзЯ ржЧрзНрж░рзБржкржЯрж┐ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржЕрзНржпрж╛ржкрзНрж░рзБржн рж╣рзЯрзЗ ржЧрзЗржЫрзЗред\n\nржЖржорж┐ рж╕рж┐ржЬрзБржХрж╛, ржЖржкржирж╛ржжрзЗрж░ ржмржирзНржзрзБ! ЁЯТЦ",
            threadID
          );
        } else {
          // Handle cases where autoApproveGroup might return false (e.g., already approved)
          console.log(
            `[Group Subscribe] Auto-approve for thread ${threadID} returned false (likely already approved).`
          );
        }
      } else {
        // --- рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░ ржпрзБржХрзНржд ржХрж░рж▓рзЗ ---
        const result = await groupManager.addPendingGroup(
          api,
          threadID,
          adderID
        );
        if (result) {
          api.sendMessage(
            "ЁЯМ╕ ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо!\n\nржЖржорж╛ржХрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржПржЗ ржЧрзНрж░рзБржкржЯрж┐ ржмрж░рзНрждржорж╛ржирзЗ ржкрзЗржирзНржбрж┐ржВ рж▓рж┐рж╕рзНржЯрзЗ ржЖржЫрзЗред ржЕрзНржпрж╛ржбржорж┐ржи ржЕрзНржпрж╛ржкрзНрж░рзБржн ржХрж░рж▓рзЗржЗ ржЖржорж┐ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░ржмрзЛред ЁЯШК",
            threadID
          );

          // --- рж╕ржХрж▓ ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ ---
          let pendingGroupInfo = null;
          try {
            pendingGroupInfo = groupManager
              .getPendingGroups()
              .find((g) => g.id === threadID);
          } catch (e) {
            console.error(
              "[Group Subscribe] Error fetching pending group info:",
              e
            );
          }

          const adderName =
            pendingGroupInfo?.requested_by_name || `User (${adderID})`; // Use fetched name if available
          const groupName = pendingGroupInfo?.name || `Group (${threadID})`; // Use fetched name if available

          const notifyMsg = `ЁЯФФ ржирждрзБржи ржЧрзНрж░рзБржк ржкрзЗржирзНржбрж┐ржВ ЁЯФФ\n\nржЧрзНрж░рзБржк: ${groupName}\nID: ${threadID}\nржпрзБржХрзНржд ржХрж░рзЗржЫрзЗ: ${adderName} (ID: ${adderID})\n\nржжрзЯрж╛ ржХрж░рзЗ "@group list" ржмрж╛ "@group approveid ${threadID}" ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред`;

          if (Array.isArray(config.ADMIN_IDS)) {
            config.ADMIN_IDS.forEach((adminId) => {
              api.sendMessage(notifyMsg, adminId, (err) => {
                if (err)
                  console.error(
                    `[Group Notify Error] ржЕрзНржпрж╛ржбржорж┐ржи ${adminId}-ржХрзЗ ржЬрж╛ржирж╛рждрзЗ рж╕ржорж╕рзНржпрж╛:`,
                    err
                  );
              });
            });
          }
        } else {
          console.log(
            `[Group Subscribe] addPendingGroup for thread ${threadID} returned false (likely already listed).`
          );
        }
      }
      return; // ржмржЯ ржпрзБржХрзНржд рж╣рж▓рзЗ рж╕рж╛ржзрж╛рж░ржг ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржмрзЗ ржирж╛
    }

    // --- рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд рж╣рж▓рзЗ (ржЖржЧрзЗрж░ ржХрзЛржб) ---
    const WELCOME_GIF_PATH = config.WELCOME_GIF_PATH;

    for (const user of addedParticipants) {
      if (String(user.userFbId) === String(botID)) continue; // Double check

      const userName = user.fullName;
      // ... (ржмрж╛ржХрж┐ ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬрзЗрж░ ржХрзЛржб ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
      let memberCount = 0;
      let threadName = "ржПржЗ ржЧрзНрж░рзБржкрзЗ";
      try {
        const threadInfo = await api.getThreadInfo(message.threadID);
        memberCount = threadInfo.participantIDs.length;
        threadName = threadInfo.name || threadName;
      } catch (e) {
        console.warn("[Welcome Event] ржЧрзНрж░рзБржкрзЗрж░ рждржерзНржп ржЖржирждрзЗ ржкрж╛рж░рж┐ржирж┐:", e);
      }

      const welcomeMessage = `тАОтХнтАвтФДтФЕтХРтХРтХРтЭБтЭБтХРтХРтХРтФЕтФДтАвтХо
     ржЖрзНржБрж╕рзНржБрж╕рж╛рзНржБрж▓рж╛рзНржБржорзБрзНржБржЖрзНржБрж▓рж╛рзНржБржЗрзНржБржХрзБрзНржБржорзНржБ
тХ░тАвтФДтФЕтХРтХРтХРтЭБтЭБтХРтХРтХРтФЕтФДтАвтХп
рж╣рж╛рж╕рж┐, ржоржЬрж╛, ржарж╛ржЯрзНржЯрж╛ржпрж╝ ржЧржбрж╝рзЗ ржЙржарзБржХ
ржЪрж┐рж░рж╕рзНржерж╛ржпрж╝рзА ржмржирзНржзрзБрждрзНржмрзЗрж░ ржмржирзНржзржиред
 ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржУ рж╕ржорзНржкрж░рзНржХ ржерж╛ржХрзБржХ ржЖржЬрзАржмржиред

тЮд ржЖрж╢рж╛ ржХрж░рж┐ ржЖржкржирж┐ ржПржЦрж╛ржирзЗ рж╣рж╛рж╕рж┐-ржоржЬрж╛ ржХрж░рзЗ
ржЖржбрзНржбрж╛ ржжрж┐рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕ржмрзЗржиред
тЮд рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗржорж┐рж╢рзЗ ржерж╛ржХржмрзЗржиред
тЮд ржЙрж╕рзНржХрж╛ржирж┐ржорзВрж▓ржХ ржХржерж╛ ржмрж╛ ржЦрж╛рж░рж╛ржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред
тЮд ржЧрзНрж░рзБржк ржПржбржорж┐ржирзЗрж░ ржХржерж╛ рж╢рзБржиржмрзЗржи ржУ рж░рзБрж▓рж╕ ржорзЗржирзЗ ржЪрж▓ржмрзЗржиред
тА║тА║ ржкрзНрж░рж┐ржпрж╝ ${userName},
ржЖржкржирж┐ ржПржЗ ржЧрзНрж░рзБржкрзЗрж░ ${memberCount} ржиржорзНржмрж░ ржорзЗржорзНржмрж╛рж░!

тА║тА║ ржЧрзНрж░рзБржк: ${threadName}   ЁЭРЦ ЁЭРД ЁЭРЛ ЁЭРВ ЁЭРО ЁЭРМ ЁЭРД
тХнтФАтХ╝тХ╛тФАтХ╝тХ╛тФАтХ╝тХ╛тФАтФАтФАтХо
       S╩Ь╔йz╩Л─╕╩М M╔й┼Л╩М╔▒oto
тХ░тФАтФАтФАтХ╝тХ╛тФАтХ╝тХ╛тФАтХ╝тХ╛тФАтХп`;

      if (fs.existsSync(WELCOME_GIF_PATH)) {
        const msg = {
          body: welcomeMessage,
          attachment: fs.createReadStream(
            path.join(__dirname, "..", WELCOME_GIF_PATH)
          ),
        };
        api.sendMessage(msg, message.threadID);
      } else {
        api.sendMessage(welcomeMessage, message.threadID);
        console.warn(
          `[Welcome Event] ржУрзЯрзЗрж▓ржХрж╛ржо GIF ржлрж╛ржЗрж▓ржЯрж┐ "${WELCOME_GIF_PATH}" ржкрж╛ржерзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред`
        );
      }
    }
  },
};
