// utils/teachManager.js

const fs = require("fs-extra");
const path = require("path");
const teachDataPath = path.join(__dirname, "..", "teachData.json");

// --- ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶≠ ---
function loadTeachData() {
  try {
    if (!fs.existsSync(teachDataPath)) {
      fs.writeJsonSync(teachDataPath, [], { spaces: 2 }); // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¶‡¶ø‡ßü‡ßá ‡¶§‡ßà‡¶∞‡¶ø
    }
    return fs.readJsonSync(teachDataPath); // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶≤‡ßã‡¶°
  } catch (error) {
    console.error("[TeachManager] teachData.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    return []; // ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
  }
}

function saveTeachData(data) {
  try {
    // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
    if (!Array.isArray(data)) {
      console.error("[TeachManager] ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡ßá‡¶á!");
      return;
    }
    fs.writeJsonSync(teachDataPath, data, { spaces: 2 });
  } catch (error) {
    console.error("[TeachManager] teachData.json ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
  }
}

// --- Teach ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

// ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
function addTeachData(question, answer) {
  const data = loadTeachData();
  // ‡¶è‡¶ï‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶ó‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ (case-insensitive)
  const existingIndex = data.findIndex(
    (item) => item.question.toLowerCase() === question.toLowerCase()
  );
  if (existingIndex !== -1) {
    // ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    data[existingIndex].answer = answer;
    saveTeachData(data);
    return {
      success: true,
      message: `‚ÑπÔ∏è ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶õ‡¶ø‡¶≤, ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ (‡¶Ü‡¶á‡¶°‡¶ø: ${
        existingIndex + 1
      })`,
    };
  } else {
    // ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    data.push({ question, answer });
    saveTeachData(data);
    const newIndex = data.length; // ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶π‡¶¨‡ßá ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø
    return {
      success: true,
      message: `‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ (‡¶Ü‡¶á‡¶°‡¶ø: ${newIndex})`,
    };
  }
}

// ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
function getTeachList() {
  return loadTeachData();
}

// ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ (‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá)
function getTeachDataByIndex(index) {
  const data = loadTeachData();
  if (index >= 0 && index < data.length) {
    return data[index];
  }
  return null;
}

// ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá)
function editTeachData(index, newQuestion, newAnswer) {
  const data = loadTeachData();
  if (index >= 0 && index < data.length) {
    data[index] = { question: newQuestion, answer: newAnswer };
    saveTeachData(data);
    return {
      success: true,
      message: `‚úèÔ∏è ‡¶Ü‡¶á‡¶°‡¶ø ${index + 1} ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
    };
  }
  return { success: false, message: `‚ùå ‡¶Ü‡¶á‡¶°‡¶ø ${index + 1} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§` };
}

// ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá)
function deleteTeachData(index) {
  const data = loadTeachData();
  if (index >= 0 && index < data.length) {
    const deletedItem = data.splice(index, 1)[0]; // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã
    saveTeachData(data);
    return {
      success: true,
      message: `üóëÔ∏è ‡¶Ü‡¶á‡¶°‡¶ø ${index + 1} ("${deletedItem.question.substring(
        0,
        20
      )}...") ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
    };
  }
  return { success: false, message: `‚ùå ‡¶Ü‡¶á‡¶°‡¶ø ${index + 1} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§` };
}

// ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ (Gemini.js ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá)
function findAnswer(userQuestion) {
  const data = loadTeachData();
  const lowerUserQuestion = userQuestion.toLowerCase().trim();
  // ‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ ‡¶Æ‡¶ø‡¶≤ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (case-insensitive)
  const found = data.find(
    (item) => item.question.toLowerCase().trim() === lowerUserQuestion
  );
  return found ? found.answer : null; // ‡¶Æ‡¶ø‡¶≤‡¶≤‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞, ‡¶®‡¶æ ‡¶Æ‡¶ø‡¶≤‡¶≤‡ßá null
}

module.exports = {
  addTeachData,
  getTeachList,
  getTeachDataByIndex,
  editTeachData,
  deleteTeachData,
  findAnswer,
  loadTeachData, // gemini.js ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
};
