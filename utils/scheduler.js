// utils/scheduler.js

const schedule = require("node-schedule");
const moment = require("moment-timezone");
const { getShizukaReply } = require("../gemini.js");
const groupManager = require("./groupManager");
const eventManager = require("./eventManager");

function initializeScheduler(api, config) {
  console.log("[Scheduler] рж╢рж┐ржбрж┐ржЙрж▓рж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...");

  const COUNTDOWN_EVENTS = config.COUNTDOWN_EVENTS || [];

  // --- Daily Event Fetch Task ---
  schedule.scheduleJob("1 0 * * *", () => {
    console.log("[Scheduler] ржкрзНрж░рждрж┐ржжрж┐ржирзЗрж░ ржЗржнрзЗржирзНржЯ ржЦрзЛржБржЬрж╛рж░ ржХрж╛ржЬ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...");
    eventManager.fetchAndSaveUpcomingEvents();
  });
  // Fetch events once on startup after a small delay
  setTimeout(() => eventManager.fetchAndSaveUpcomingEvents(), 5000);

  let lastCheckedMinute = -1;

  // --- Main Interval for Timed Messages ---
  setInterval(async () => {
    const currentApproved = groupManager.getApprovedGroups();
    if (currentApproved.length === 0) return;

    const now = moment().tz("Asia/Dhaka");
    const hour = now.hour();
    const minute = now.minute();
    const dayOfWeek = now.day();

    if (minute === lastCheckedMinute) return;
    lastCheckedMinute = minute;

    let topic = null;
    const currentTime = now.format("h:mm A");

    // --- Specific Time Triggers ---
    if (hour === 6 && minute === 0) {
      const todaysEvents = eventManager.getTodaysEvents();
      if (todaysEvents.length > 0) {
        console.log(
          `[Scheduler] ${todaysEvents.length} ржЯрж┐ ржЖржЬржХрзЗрж░ ржЗржнрзЗржирзНржЯ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред`
        );
        for (const event of todaysEvents) {
          const eventTopic = `ржЖржЬ ${now.format("D MMM")} рждрж╛рж░рж┐ржЦ, ${event.name} (${
            event.type
          } ржжрж┐ржмрж╕)ред ржПржЗ ржжрж┐ржмрж╕ржЯрж┐ рж╕ржорзНржкрж░рзНржХрзЗ рж╕рж┐ржЬрзБржХрж╛ рж╕рзНржЯрж╛ржЗрж▓рзЗ ржорж┐рж╖рзНржЯрж┐ ржХрж░рзЗ ржЫрзЛржЯрзНржЯ ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрж╛ржУред`;
          await sendScheduledMessage(api, eventTopic, currentApproved);
          await new Promise((resolve) => setTimeout(resolve, 5000)); // Delay between multiple events
        }
      }
    }

    if (hour === 5 && minute === 0)
      topic = `ржПржЦржи ржнрзЛрж░ рзлржЯрж╛ (${currentTime})ред ржлржЬрж░рзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржорж┐рж╖рзНржЯрж┐ ржЗрж╕рж▓рж╛ржорж┐ржХ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржжрж╛ржУред`;
    else if (hour === 7 && minute === 0)
      topic = `ржПржЦржи рж╕ржХрж╛рж▓ рзнржЯрж╛ (${currentTime})ред ржЖржЬржХрзЗрж░ рждрж╛рж░рж┐ржЦ (${now.format(
        "D MMM YYYY"
      )}), ржмрж╛рж░ (${now.format(
        "dddd"
      )}) ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЗ рж╕ржмрж╛ржЗржХрзЗ 'рж╢рзБржн рж╕ржХрж╛рж▓' ржЬрж╛ржирж╛ржУ ржПржмржВ ржжрж┐ржирзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржЫрзЛржЯрзНржЯ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржорзВрж▓ржХ ржЙржХрзНрждрж┐ ржмрж╛ ржоржЬрж╛рж░ ржлрзНржпрж╛ржХрзНржЯ ржпрзЛржЧ ржХрж░рзЛред`;
    else if (hour === 13 && minute === 30)
      topic = `ржПржЦржи ржжрзБржкрзБрж░ рзз:рзйрзж (${currentTime})ред ржпрзЛрж╣рж░рзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ ржЗрж╕рж▓рж╛ржорж┐ржХ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржжрж╛ржУред`;
    else if (hour === 16 && minute === 30)
      topic = `ржПржЦржи ржмрж┐ржХрж╛рж▓ рзк:рзйрзж (${currentTime})ред ржЖрж╕рж░рзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржжрж╛ржУред`;
    else if (hour === 18 && minute === 0)
      topic = `ржПржЦржи рж╕ржирзНржзрзНржпрж╛ рзмржЯрж╛ (${currentTime})ред ржорж╛ржЧрж░рж┐ржмрзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржжрж╛ржУред`;
    else if (hour === 20 && minute === 0)
      topic = `ржПржЦржи рж░рж╛ржд рзоржЯрж╛ (${currentTime})ред ржПрж╢рж╛рж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржжрж╛ржУред`;
    else if (hour === 22 && minute === 0)
      topic = `ржПржЦржи рж░рж╛ржд рззрзжржЯрж╛ (${currentTime})ред ржПржХржЯрж┐ ржЫрзЛржЯ, рж╕рж╣ржЬрзЗ ржмрзЛржЭрж╛ ржпрж╛рзЯ ржПржоржи ржЗрж╕рж▓рж╛ржорж┐ржХ ржЙржХрзНрждрж┐ ржмрж╛ рж╣рж╛ржжрж┐рж╕рзЗрж░ ржЕржВрж╢ рж╢рзЗрзЯрж╛рж░ ржХрж░рзЛред`;
    else if (hour === 0 && minute === 0)
      topic = `ржПржЦржи рж░рж╛ржд рззрзиржЯрж╛ (${currentTime})ред рж╕ржмрж╛ржЗржХрзЗ ржорж┐рж╖рзНржЯрж┐ ржХрж░рзЗ 'рж╢рзБржн рж░рж╛рждрзНрж░рж┐' ржЬрж╛ржирж╛ржУред`;
    else if (hour === 2 && minute === 0)
      topic = `ржПржЦржи рж░рж╛ржд рзиржЯрж╛ (${currentTime})ред ржпрж╛рж░рж╛ ржПржЦржирзЛ ржЬрзЗржЧрзЗ ржЖржЫрзЗ, рждрж╛ржжрзЗрж░ рж╕рж┐ржЬрзБржХрж╛ рж╕рзНржЯрж╛ржЗрж▓рзЗ, ржЦрзБржм ржлрж╛ржирж┐ ржПржмржВ ржорж┐рж╖рзНржЯрж┐ ржХрж░рзЗ ржШрзБржорж╛рждрзЗ ржпрж╛ржУрзЯрж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржжрж╛ржУред`;
    else if (dayOfWeek === 5 && hour === 12 && minute === 0)
      topic = `ржЖржЬ рж╢рзБржХрзНрж░ржмрж╛рж░, ржжрзБржкрзБрж░ рззрзиржЯрж╛ (${currentTime})ред ржЬрзБржорзНржорж╛рж░ ржирж╛ржорж╛ржЬрзЗрж░ ржЧрзБрж░рзБрждрзНржм рж╕ржорзНржкрж░рзНржХрзЗ ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ ржЗрж╕рж▓рж╛ржорж┐ржХ ржмрж╛рж░рзНрждрж╛ ржжрж╛ржУред`;
    else if (dayOfWeek === 5 && hour === 12 && minute === 30)
      topic = `ржПржЦржи рж╕рж╛рзЬрзЗ рззрзиржЯрж╛ (${currentTime})ред ржЬрзБржорзНржорж╛рж░ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗ! рж╕рж┐ржЬрзБржХрж╛ рж╕рзНржЯрж╛ржЗрж▓рзЗ рж╕ржмрж╛ржЗржХрзЗ ржПржХржЯрзБ рждрж╛рзЬрж╛ ржжрж┐рзЯрзЗ ржорж┐рж╖рзНржЯрж┐ ржХрж░рзЗ ржмрж▓рзЛ ржирж╛ржорж╛ржЬрзЗ ржпрзЗрждрзЗ, ржнрж╛ржЗрзЯрж╛ ржПржмржВ ржЖржкрзБ ржЙржнрзЯржХрзЗржЗред`;
    else if (hour > 7 && hour < 22 && minute === 0)
      topic = `ржПржЦржи ${currentTime} ржмрж╛ржЬрзЗред рж╕ржорзЯржЯрж╛ ржоржирзЗ ржХрж░рж┐рзЯрзЗ ржжрж╛ржУред`;
    else if (hour === 14 && minute === 0)
      topic = `ржПржЦржи ржжрзБржкрзБрж░ рзиржЯрж╛ (${currentTime})ред рж╕рж┐ржЬрзБржХрж╛ рж╕рзНржЯрж╛ржЗрж▓рзЗ, ржЧрзНрж░рзБржкрзЗрж░ рж╕ржмрж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржоржЬрж╛рж░ ржХрж┐ржирзНрждрзБ рж╕рж╣ржЬ ржкрзНрж░рж╢рзНржи ржХрж░рзЛ (ржпрзЗржоржи ржмржЗ, ржПржирж┐ржорзЗ ржмрж╛ рж╕рж╛ржзрж╛рж░ржг ржЬрзНржЮрж╛ржи ржирж┐рзЯрзЗ)ред`;

    // --- Countdown Event Checker ---
    COUNTDOWN_EVENTS.forEach((event) => {
      const eventDate = moment.tz(event.date, "YYYY-MM-DD", "Asia/Dhaka");
      const daysLeft = eventDate.diff(now, "days");
      if ([7, 3, 1].includes(daysLeft) && hour === 8 && minute === 0) {
        topic = `"${event.name}" ржЖрж╕рждрзЗ ржЖрж░ ржорж╛рждрзНрж░ ${daysLeft} ржжрж┐ржи ржмрж╛ржХрж┐! ЁЯОЙ ржПржХржЯрж┐ ржЫрзЛржЯрзНржЯ ржХрж╛ржЙржирзНржЯржбрж╛ржЙржи ржмрж╛рж░рзНрждрж╛ ржжрж╛ржУред`;
      } else if (daysLeft === 0 && hour === 8 && minute === 0) {
        topic = `ржЖржЬ "${event.name}"! ЁЯОЙ рж╕ржмрж╛ржЗржХрзЗ рж╢рзБржнрзЗржЪрзНржЫрж╛ ржЬрж╛ржирж╛ржУред`;
      }
    });

    if (topic) {
      await sendScheduledMessage(api, topic, currentApproved);
    }
  }, 60 * 1000); // Check every minute
}

async function sendScheduledMessage(api, topic, groups) {
  const approvedGroupIds = groups
    .map((g) => g.id)
    .filter((id) => groupManager.isGroupApprovedAndActive(id)); // рж╢рзБржзрзБ ржЕрзНржпрж╛ржХрзНржЯрж┐ржн ржЧрзНрж░рзБржкрзЗ ржкрж╛ржарж╛ржмрзЗ
  if (approvedGroupIds.length === 0) return;

  try {
    const scheduledThreadID = "SCHEDULED_TASK_" + topic.substring(0, 15);
    const text = await getShizukaReply(scheduledThreadID, topic);

    for (const groupID of approvedGroupIds) {
      api.sendMessage(text, groupID, (err) => {
        if (err) console.error(`[Scheduled Msg Error] ржЧрзНрж░рзБржк ${groupID}:`, err);
      });
      await new Promise((resolve) => setTimeout(resolve, 500)); // рж╕рзНржкрзНржпрж╛ржорж┐ржВ ржПрзЬрж╛рждрзЗ ржбрж┐рж▓рзЗ
    }
  } catch (e) {
    console.error(`[Scheduled Task] "${topic}" ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛:`, e);
  }
}

module.exports = {
  initializeScheduler,
};
