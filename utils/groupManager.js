// utils/groupManager.js (v2.7 - Added handleNewGroupInteraction & isGroupPending)

const fs = require("fs-extra");
const path = require("path");
const groupsFilePath = path.join(__dirname, "..", "groups.json");

// --- ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶≠ ---
function loadGroups() {
  try {
    if (!fs.existsSync(groupsFilePath)) {
      fs.writeJsonSync(
        groupsFilePath,
        { pending: [], approved: [] },
        { spaces: 2 }
      );
      console.log(
        "[GroupManager Load] groups.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø, ‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§"
      );
      return { pending: [], approved: [] };
    }
    const fileContent = fs.readFileSync(groupsFilePath, "utf8");
    let data;
    try {
      data = JSON.parse(
        fileContent.trim() || '{ "pending": [], "approved": [] }'
      );
    } catch (parseError) {
      console.error(
        "[GroupManager Load Error] JSON ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶Ç ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:",
        parseError,
        "‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
      );
      data = { pending: [], approved: [] };
      fs.writeJsonSync(groupsFilePath, data, { spaces: 2 });
    }
    data.approved = Array.isArray(data.approved)
      ? data.approved.map((group) => ({
          ...group,
          status: group.status || "active",
        }))
      : [];
    data.pending = Array.isArray(data.pending) ? data.pending : [];
    return data;
  } catch (error) {
    console.error(
      "[GroupManager Load Error] groups.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:",
      error
    );
    try {
      fs.writeJsonSync(
        groupsFilePath,
        { pending: [], approved: [] },
        { spaces: 2 }
      );
    } catch {}
    return { pending: [], approved: [] };
  }
}

function saveGroups(data) {
  try {
    if (
      !data ||
      !Array.isArray(data.pending) ||
      !Array.isArray(data.approved)
    ) {
      console.error(
        "[GroupManager Save Error] ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ó‡¶†‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü!"
      );
      data = {
        pending: Array.isArray(data?.pending) ? data.pending : [],
        approved: Array.isArray(data?.approved)
          ? data.approved.map((g) => ({ ...g, status: g.status || "active" }))
          : [],
      };
      console.warn("[GroupManager Save] ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ó‡¶†‡¶® ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
    } else {
      data.approved = data.approved.map((group) => ({
        ...group,
        status: group.status || "active",
      }));
    }
    fs.writeJsonSync(groupsFilePath, data, { spaces: 2 });
    // console.log("[GroupManager Save] groups.json ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"); // ‡¶≤‡¶ó ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
  } catch (error) {
    console.error(
      "[GroupManager Save Error] groups.json ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:",
      error
    );
  }
}

// --- ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

// ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ (log:subscribe ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
async function addPendingGroup(api, threadID, adderUserID) {
  let groups;
  try {
    groups = loadGroups();
  } catch (loadErr) {
    console.error("[AddPending] groups.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", loadErr);
    return false;
  }
  const isPending = groups.pending.some((g) => g.id === threadID);
  const isApproved = groups.approved.some((g) => g.id === threadID);
  if (isPending || isApproved) {
    console.log(
      `[GroupManager] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá (addPendingGroup)‡•§`
    );
    return false;
  }

  let groupName = `Unknown Group (${threadID})`;
  let adderName = `Unknown Adder (${adderUserID || "N/A"})`;
  try {
    const threadInfo = await api.getThreadInfo(threadID);
    if (threadInfo?.name) {
      groupName = threadInfo.name;
    }
  } catch (err) {
    console.error(
      `[GroupManager] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (addPendingGroup):`,
      err.errorDescription || err
    );
  }
  try {
    if (adderUserID) {
      const adderInfo = await api.getUserInfo([adderUserID]);
      if (adderInfo?.[adderUserID]?.name) {
        adderName = adderInfo[adderUserID].name;
      }
    }
  } catch (err) {
    console.error(
      `[GroupManager] ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ${adderUserID} ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (addPendingGroup):`,
      err.errorDescription || err
    );
  }

  const newEntry = {
    id: threadID,
    name: groupName,
    requested_by_id: adderUserID || "N/A",
    requested_by_name: adderName,
  };
  groups.pending.push(newEntry);
  try {
    saveGroups(groups);
    console.log(
      `[GroupManager] ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç (log:subscribe): ${groupName} (ID: ${threadID})`
    );
    return true;
  } catch (saveError) {
    console.error(
      "[GroupManager] Pending ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡ßá‡¶≠‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (addPendingGroup):",
      saveError
    );
    return false;
  }
}

// <<< ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ >>>
async function handleNewGroupInteraction(api, threadID, config) {
  let groups;
  try {
    groups = loadGroups();
  } catch (loadErr) {
    console.error("[handleNewGroup] groups.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", loadErr);
    return false; // Indicate failure
  }

  const isPending = groups.pending.some((g) => g.id === threadID);
  const isApproved = groups.approved.some((g) => g.id === threadID);

  // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á
  if (isPending || isApproved) {
    console.log(
      `[handleNewGroup] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá, ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§`
    );
    return false; // Indicate already handled or listed
  }

  // ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
  let groupName = `Unknown Group (${threadID})`;
  try {
    const threadInfo = await api.getThreadInfo(threadID);
    if (threadInfo?.name) {
      // Use threadInfo.name directly if available
      groupName = threadInfo.name;
    }
    console.log(`[handleNewGroup] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: ${groupName}`);
  } catch (err) {
    console.error(
      `[handleNewGroup] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:`,
      err.errorDescription || err
    );
  }

  // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶∞ ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ)
  const newEntry = {
    id: threadID,
    name: groupName,
    requested_by_id: "Unknown (Detected)", // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ú‡¶æ‡¶®‡¶æ ‡¶®‡ßá‡¶á
    requested_by_name: "First Message",
  };

  groups.pending.push(newEntry);

  try {
    saveGroups(groups);
    console.log(
      `[handleNewGroup] ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${groupName} (ID: ${threadID})`
    );

    // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    const notifyMsg = `üîî ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ (‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç) üîî\n\n‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${groupName}\nID: ${threadID}\n(‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡ßü ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)\n\n‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá "@group list" ‡¶¨‡¶æ "@group approveid ${threadID}" ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`;

    if (Array.isArray(config?.ADMIN_IDS)) {
      config.ADMIN_IDS.forEach((adminId) => {
        api.sendMessage(notifyMsg, adminId, (err) => {
          if (err)
            console.error(
              `[Group Notify Error - handleNewGroup] ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ${adminId}-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:`,
              err
            );
        });
      });
    }
    return true; // Indicate success
  } catch (saveError) {
    console.error("[handleNewGroup] ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡ßá‡¶≠‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", saveError);
    return false; // Indicate failure
  }
}
// <<< ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ >>>

// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ö‡¶ü‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ (log:subscribe ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
async function autoApproveGroup(api, threadID, adminUserID) {
  let groups;
  try {
    groups = loadGroups();
  } catch {
    return false;
  }
  const isApproved = groups.approved.some((g) => g.id === threadID);
  if (isApproved) {
    console.log(
      `[GroupManager] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° (autoApprove)‡•§`
    );
    groups.pending = groups.pending.filter((g) => g.id !== threadID);
    saveGroups(groups);
    return false;
  }

  let groupName = `Unknown Group (${threadID})`;
  let adminName = `Admin (${adminUserID})`;
  try {
    const threadInfo = await api.getThreadInfo(threadID);
    if (threadInfo?.name) {
      groupName = threadInfo.name;
    }
  } catch (err) {}
  try {
    const adderInfo = await api.getUserInfo([adminUserID]);
    if (adderInfo?.[adminUserID]?.name) {
      adminName = adderInfo[adminUserID].name;
    }
  } catch (err) {}

  const newEntry = {
    id: threadID,
    name: groupName,
    requested_by_id: adminUserID,
    requested_by_name: adminName,
    status: "active",
  };
  groups.pending = groups.pending.filter((g) => g.id !== threadID);
  groups.approved.push(newEntry);
  try {
    saveGroups(groups);
    console.log(
      `[GroupManager] ‡¶Ö‡¶ü‡ßã-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá (log:subscribe): ${groupName} (ID: ${threadID})`
    );
    return true;
  } catch (saveError) {
    console.error("[GroupManager] AutoApprove ‡¶∏‡ßá‡¶≠‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", saveError);
    return false;
  }
}

// ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
async function forceApproveGroup(api, threadID) {
  let groups;
  try {
    groups = loadGroups();
  } catch {
    return { success: false, message: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" };
  }
  const isApproved = groups.approved.some((g) => g.id === threadID);
  if (isApproved) {
    console.log(
      `[GroupManager] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° (forceApprove)‡•§`
    );
    groups.pending = groups.pending.filter((g) => g.id !== threadID);
    saveGroups(groups);
    return {
      success: true,
      message: `‚ÑπÔ∏è ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶°‡•§`,
    };
  }

  let groupName = `Unknown Group (${threadID})`;
  try {
    const threadInfo = await api.getThreadInfo(threadID);
    if (threadInfo?.name) {
      groupName = threadInfo.name;
    }
  } catch (err) {
    console.error(
      `[GroupManager] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ${threadID} ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (forceApprove):`,
      err.errorDescription || err
    );
  }

  const newEntry = {
    id: threadID,
    name: groupName,
    requested_by_id: "Forced (Admin)",
    requested_by_name: "Admin Command",
    status: "active",
  };
  groups.pending = groups.pending.filter((g) => g.id !== threadID);
  groups.approved.push(newEntry);
  try {
    saveGroups(groups);
    console.log(
      `[GroupManager] ‡¶´‡ßã‡¶∞‡ßç‡¶∏-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${groupName} (ID: ${threadID})`
    );
    return {
      success: true,
      message: `‚úÖ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ "${groupName}" (ID: ${threadID}) ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
    };
  } catch (saveError) {
    console.error("[GroupManager] ForceApprove ‡¶∏‡ßá‡¶≠‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", saveError);
    return { success: false, message: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§" };
  }
}

// ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
function approveGroupByCriteria(criteria) {
  const groups = loadGroups();
  let groupIndex = -1;
  let approvedGroupData = null;
  const index = parseInt(criteria, 10);
  if (!isNaN(index) && index > 0 && index <= groups.pending.length) {
    groupIndex = index - 1;
    approvedGroupData = groups.pending[groupIndex];
  } else {
    groupIndex = groups.pending.findIndex(
      (g) =>
        g.id === criteria || g.name.toLowerCase() === criteria.toLowerCase()
    );
    if (groupIndex !== -1) {
      approvedGroupData = groups.pending[groupIndex];
    }
  }
  if (groupIndex === -1 || !approvedGroupData) {
    return {
      success: false,
      message: `"${criteria}" ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
    };
  }
  groups.pending.splice(groupIndex, 1);
  if (!groups.approved.some((g) => g.id === approvedGroupData.id)) {
    groups.approved.push({ ...approvedGroupData, status: "active" });
    saveGroups(groups);
    return {
      success: true,
      message: `‚úÖ "${approvedGroupData.name}" (${approvedGroupData.id}) ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
    };
  } else {
    saveGroups(groups);
    return {
      success: true,
      message: `‚ÑπÔ∏è "${approvedGroupData.name}" (${approvedGroupData.id}) ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶°, ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã‡•§`,
    };
  }
}

// ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
function rejectGroupByCriteria(criteria) {
  const groups = loadGroups();
  let groupIndex = -1;
  let rejectedGroup = null;
  const index = parseInt(criteria, 10);
  if (!isNaN(index) && index > 0 && index <= groups.pending.length) {
    groupIndex = index - 1;
    rejectedGroup = groups.pending[groupIndex];
  } else {
    groupIndex = groups.pending.findIndex(
      (g) =>
        g.id === criteria || g.name.toLowerCase() === criteria.toLowerCase()
    );
    if (groupIndex !== -1) {
      rejectedGroup = groups.pending[groupIndex];
    }
  }
  if (groupIndex === -1 || !rejectedGroup) {
    return {
      success: false,
      message: `"${criteria}" ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
    };
  }
  groups.pending.splice(groupIndex, 1);
  saveGroups(groups);
  return {
    success: true,
    message: `‚ùå "${rejectedGroup.name}" (${rejectedGroup.id}) ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
  };
}

// ‡¶∏‡¶¨ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
function rejectAllPending() {
  const groups = loadGroups();
  const rejectedCount = groups.pending.length;
  if (rejectedCount === 0) {
    return { success: false, message: "‚è≥ ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶®‡ßá‡¶á‡•§" };
  }
  groups.pending = [];
  saveGroups(groups);
  return {
    success: true,
    message: `üóëÔ∏è ${rejectedCount} ‡¶ü‡¶ø ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
  };
}

// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
function removeApprovedGroup(criteria) {
  const groups = loadGroups();
  let groupIndex = -1;
  let removedGroup = null;
  const approvedList = groups.approved;
  const index = parseInt(criteria, 10);
  if (!isNaN(index) && index > 0 && index <= approvedList.length) {
    groupIndex = index - 1;
    removedGroup = approvedList[groupIndex];
  } else {
    groupIndex = approvedList.findIndex(
      (g) =>
        g.id === criteria || g.name.toLowerCase() === criteria.toLowerCase()
    );
    if (groupIndex !== -1) {
      removedGroup = approvedList[groupIndex];
    }
  }
  if (groupIndex === -1 || !removedGroup) {
    return {
      success: false,
      message: `"${criteria}" ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
    };
  }
  approvedList.splice(groupIndex, 1);
  groups.approved = approvedList;
  saveGroups(groups);
  return {
    success: true,
    message: `üóëÔ∏è "${removedGroup.name}" (${removedGroup.id}) ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`,
  };
}

// ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§)
function updateGroupStatus(threadID, newStatus) {
  if (newStatus !== "active" && newStatus !== "inactive") {
    return {
      success: false,
      message: "‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡•§ 'active' ‡¶¨‡¶æ 'inactive' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    };
  }
  let groups;
  try {
    groups = loadGroups();
  } catch (loadErr) {
    console.error("[UpdateStatus] groups.json ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", loadErr);
    return { success: false, message: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" };
  }
  const groupIndex = groups.approved.findIndex((g) => g.id === threadID);
  if (groupIndex === -1) {
    return {
      success: false,
      message: `‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ${threadID} ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶®‡ßá‡¶á‡•§`,
    };
  }
  const groupToUpdate = groups.approved[groupIndex];
  const oldStatus = groupToUpdate.status || "active";
  const groupName = groupToUpdate.name || `Group (${threadID})`;
  if (oldStatus === newStatus) {
    return {
      success: true,
      message: `"${groupName}" (${threadID}) ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ${
        newStatus === "active" ? "üü¢ Active" : "üî¥ Inactive"
      } ‡¶Ü‡¶õ‡ßá‡•§`,
    };
  }
  groups.approved[groupIndex] = { ...groupToUpdate, status: newStatus };
  try {
    saveGroups(groups);
    const reloadedGroups = loadGroups(); // Verify save
    const updatedGroup = reloadedGroups.approved.find((g) => g.id === threadID);
    if (updatedGroup && updatedGroup.status === newStatus) {
      console.log(
        `[GroupManager Success] ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ "${groupName}" (${threadID}) ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ "${newStatus}" ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`
      );
      return {
        success: true,
        message: `"${groupName}" (${threadID}) ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ${
          newStatus === "active" ? "üü¢ Active" : "üî¥ Inactive"
        }‡•§`,
      };
    } else {
      console.error(
        `[GroupManager Error] ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø! Reloaded: ${updatedGroup?.status}`
      );
      return {
        success: false,
        message: `‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ "${newStatus}" ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∏‡ßá‡¶≠ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`,
      };
    }
  } catch (saveError) {
    console.error(
      "[GroupManager Save Error] ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:",
      saveError
    );
    return {
      success: false,
      message: "‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
    };
  }
}

// --- ‡¶ó‡ßá‡¶ü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
function getPendingGroups() {
  return loadGroups().pending;
}
function getApprovedGroups() {
  return loadGroups().approved;
}
function isGroupApprovedAndActive(threadID) {
  const group = loadGroups().approved.find((g) => g.id === threadID);
  return group ? group.status === "active" : false;
}
function isGroupApproved(threadID) {
  return loadGroups().approved.some((g) => g.id === threadID);
}
function loadRawGroups() {
  return loadGroups();
}

// <<< ‡¶®‡¶§‡ßÅ‡¶®: ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® >>>
function isGroupPending(threadID) {
  try {
    return loadGroups().pending.some((g) => g.id === threadID);
  } catch {
    return false;
  }
}
// <<< ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ >>>

module.exports = {
  addPendingGroup, // Used by log:subscribe (if it works)
  autoApproveGroup, // Used by log:subscribe (if it works)
  approveGroupByCriteria, // Used by @group approve command
  rejectGroupByCriteria, // Used by @group reject command
  rejectAllPending, // Used by @group rejectall command
  removeApprovedGroup, // Used by @group remove command
  updateGroupStatus, // Used by @on / @off commands
  getPendingGroups, // Used by @group list command & logSubscribe notify
  getApprovedGroups, // Used by @group approved command
  isGroupApprovedAndActive, // Used by index.js for interaction check
  isGroupApproved, // Used by index.js for command check
  loadRawGroups, // Potentially useful elsewhere
  forceApproveGroup, // Used by @group approveid command
  handleNewGroupInteraction, // <<< ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶æÔøΩÔøΩÔøΩ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü (Used by index.js first message detection)
  isGroupPending, // <<< ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü (Used by index.js first message detection)
};
